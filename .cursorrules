# Cursor Rules for Work Portfolio (work.encosion.com)

## Project Overview
Interactive web applications and prototypes showcasing modern web development techniques. Focus on demonstrating technical skills through practical examples.

## Core Principles

### Technology Stack
- **Frontend**: HTML5, CSS3, JavaScript (ES6+)
- **Backend**: PHP for server-side functionality
- **Styling**: Custom CSS with CSS Variables for theming
- **Data**: JSON configuration files for dynamic content
- **No External Frameworks**: Vanilla implementations to showcase core skills

### Development Focus
- **Performance First**: Fast loading, minimal dependencies
- **Modern Standards**: ES6+ JavaScript, CSS Grid/Flexbox, semantic HTML
- **Responsive Design**: Mobile-first approach with progressive enhancement
- **Cache Busting**: Automatic cache-busting for rapid development cycles
- **Browser Support**: Chrome 60+, Firefox 55+, Safari 12+, Edge 79+

## File Structure Guidelines

### Directory Organization
```
work/
├── index.php              # Main page
├── chat/                  # Conversational sourcing agent demo v1
├── ray/                   # Conversational sourcing agent demo v2
├── beamery-styles/        # UI component library
├── tools/                 # Development utilities
└── [project-specific]/    # Individual project folders
```

### Naming Conventions
- **PHP Files**: Descriptive names for functionality
- **CSS Files**: `style.css` for main stylesheets
- **JavaScript Files**: Descriptive names matching functionality
- **JSON Files**: Configuration files with clear naming

## Code Quality Standards

### HTML Development
- **Semantic HTML5**: Use proper semantic elements
- **Accessibility**: ARIA labels, keyboard navigation, screen reader support
- **SEO Optimization**: Meta tags, structured data, proper heading hierarchy
- **Performance**: Optimize images, minimize HTTP requests

### CSS Development
- **CSS Variables**: Use custom properties for theming and consistency
- **Mobile-First**: Start with mobile styles, enhance for larger screens
- **Modern Layout**: CSS Grid and Flexbox for responsive layouts
- **Performance**: Efficient selectors, minimal specificity conflicts
- **Organization**: Logical grouping of related styles

### JavaScript Development
- **ES6+ Features**: Use modern JavaScript features appropriately
- **Modular Code**: Organize code into logical functions and modules
- **Error Handling**: Implement proper try-catch blocks
- **Performance**: Optimize for smooth animations and interactions
- **Progressive Enhancement**: Ensure functionality without JavaScript

### PHP Development
- **Security**: Input validation, output escaping, prepared statements
- **Performance**: Efficient database queries, caching strategies
- **Error Handling**: Comprehensive error handling and logging
- **Code Organization**: Clear function and class structure

## Project-Specific Guidelines

### Chat System Prototype
- **Typing Indicators**: Realistic typing animation with configurable delays
- **Auto-population**: User responses auto-filled from markdown files
- **Message Streaming**: Progressive text reveal for natural conversation flow
- **Responsive Design**: Mobile-friendly interface with touch support
- **Conversation Management**: JSON-based conversation configuration

### Candidate Table System
- **Loading States**: Smooth loading spinners during data fetch
- **Data Management**: Efficient handling of candidate profiles
- **Scrollable Interface**: Smooth scrolling through candidate cards
- **Responsive Layout**: Adapts to different screen sizes
- **Interactive Elements**: Hover effects and click interactions

### Ray AI Integration
- **API Integration**: Clean integration with Ray AI services
- **Error Handling**: Graceful handling of API failures
- **User Experience**: Intuitive interface for AI interactions
- **Performance**: Optimized API calls and response handling

## Development Workflow

### Before Starting New Projects
1. **Plan Architecture**: Define clear project structure and goals
2. **Choose Technologies**: Select appropriate tech stack for the use case
3. **Design System**: Establish consistent design patterns and components
4. **Performance Budget**: Set performance targets and monitoring

### During Development
1. **Mobile-First**: Start with mobile design and enhance upward
2. **Progressive Enhancement**: Ensure core functionality works without JavaScript
3. **Performance Monitoring**: Regularly check loading times and optimization
4. **Cross-Browser Testing**: Test across target browsers and devices

### After Completing Projects
1. **Performance Audit**: Check loading times, image optimization, code efficiency
2. **Accessibility Review**: Ensure proper accessibility features
3. **Documentation**: Document key features and implementation details
4. **Portfolio Integration**: Add to main portfolio with proper showcase

## Cache Busting Strategy

### Implementation
- **Version Parameters**: Add version parameters to CSS/JS files
- **PHP Headers**: Use PHP headers to disable caching during development
- **Server Configuration**: .htaccess rules for server-level cache control
- **Build Process**: Automated cache-busting for production deployments

### Development Benefits
- **Rapid Iteration**: See changes immediately during development
- **Version Control**: Track changes with version parameters
- **Production Optimization**: Proper caching for live deployments

## Performance Optimization

### Image Optimization
- **Format Selection**: Use appropriate formats (WebP, AVIF for modern browsers)
- **Responsive Images**: Multiple sizes for different screen densities
- **Lazy Loading**: Implement lazy loading for images below the fold
- **Compression**: Optimize file sizes without quality loss

### Code Optimization
- **Minification**: Minify CSS and JavaScript for production
- **Bundling**: Combine related files to reduce HTTP requests
- **Tree Shaking**: Remove unused code from JavaScript bundles
- **Critical CSS**: Inline critical CSS for above-the-fold content

### Database Optimization
- **Efficient Queries**: Use appropriate indexes and query optimization
- **Caching**: Implement caching strategies for frequently accessed data
- **Connection Management**: Efficient database connection handling

## Security Considerations

### Frontend Security
- **Input Validation**: Validate all user inputs on the client side
- **XSS Prevention**: Escape HTML output appropriately
- **Content Security Policy**: Implement CSP headers
- **HTTPS**: Ensure all communications are encrypted

### Backend Security
- **SQL Injection Prevention**: Use prepared statements
- **Authentication**: Secure session management
- **File Upload Security**: Validate file types and content
- **Error Handling**: Secure error messages without information disclosure

## Testing Strategy

### Manual Testing
- **Cross-Browser Testing**: Test across target browsers
- **Device Testing**: Test on various devices and screen sizes
- **Performance Testing**: Check loading times and responsiveness
- **Accessibility Testing**: Verify accessibility features work correctly

### Automated Testing
- **Unit Tests**: Test individual functions and components
- **Integration Tests**: Test complete workflows
- **Performance Tests**: Automated performance monitoring
- **Accessibility Tests**: Automated accessibility validation

## Documentation Standards

### Code Documentation
- **Inline Comments**: Explain complex logic and business rules
- **Function Documentation**: Document parameters, return values, and usage
- **README Files**: Comprehensive project documentation
- **API Documentation**: Document any APIs or interfaces

### Project Documentation
- **Setup Instructions**: Clear installation and configuration steps
- **Usage Examples**: Practical examples of how to use features
- **Architecture Overview**: High-level system architecture
- **Troubleshooting**: Common issues and solutions

## Common Pitfalls to Avoid

### Performance Issues
- **Large Images**: Don't use unoptimized images
- **Blocking Resources**: Avoid blocking CSS/JS in head
- **Excessive HTTP Requests**: Minimize number of requests
- **Unused Code**: Remove unused CSS and JavaScript

### Accessibility Issues
- **Missing Alt Text**: Always provide alt text for images
- **Poor Color Contrast**: Ensure sufficient color contrast
- **Keyboard Navigation**: Ensure all functionality is keyboard accessible
- **Screen Reader Support**: Test with screen readers

### Security Issues
- **Unvalidated Input**: Always validate and sanitize user input
- **Exposed Sensitive Data**: Don't expose API keys or sensitive information
- **Insecure Authentication**: Implement proper authentication
- **SQL Injection**: Use prepared statements for all database queries

## Future Enhancements

### Planned Features
- **Advanced Animations**: More sophisticated CSS animations and transitions
- **Web Components**: Custom web components for reusable functionality
- **Progressive Web App**: PWA features for offline functionality
- **Advanced Interactions**: More complex user interaction patterns

### Technical Improvements
- **Build System**: Automated build and deployment pipeline
- **Testing Framework**: Comprehensive testing suite
- **Performance Monitoring**: Real-time performance monitoring
- **Analytics Integration**: User behavior analytics

---

*This .cursorrules file should be updated as the work portfolio evolves and new projects are added.*
